#ifndef LOC_TYPES_H
#define LOC_TYPES_H

#include <string>
#include <vector>

#define LOC_TEXT_SYMBOL_SIZE 3
#define LOC_TEXT_VARIABLE_SIZE 12

typedef enum loc_text_id {
  LOC_TEXT_UNDEFINED,

  LOC_TEXT_MAINMENU_BUTTON_TEXT_PLAY,
  LOC_TEXT_MAINMENU_BUTTON_TEXT_CHARACTER,
  LOC_TEXT_MAINMENU_BUTTON_TEXT_SETTINGS,
  LOC_TEXT_MAINMENU_BUTTON_TEXT_EXIT,
  LOC_TEXT_MAINMENU_BUTTON_TEXT_EDITOR,
  LOC_TEXT_MAINMENU_STATE_CHARACTER_BUTTON_ENTER_TAB_INVENTORY,
  LOC_TEXT_MAINMENU_STATE_CHARACTER_BUTTON_ENTER_TAB_STATS,
  LOC_TEXT_MAINMENU_STATE_CHARACTER_BUTTON_BACK,
  LOC_TEXT_MAINMENU_STATE_CHARACTER_TAB_STATS_BUTTON_UPGRADE,
  LOC_TEXT_MAINMENU_STATE_CHARACTER_TAB_STATS_CURRENCY_TEXT_TOTAL,
  LOC_TEXT_MAINMENU_PAUSE_BUTTON_TEXT_RESUME,
  LOC_TEXT_MAINMENU_PAUSE_BUTTON_TEXT_EXIT_TO_MAINMENU,
  LOC_TEXT_MAINMENU_PAUSE_BUTTON_TEXT_EXIT_TO_DESKTOP,
  LOC_TEXT_MAINMENU_MAP_CHOICE_BACK,
  LOC_TEXT_MAINMENU_TRAIT_CHOICE_AVAILABLE_TRAITS_TITLE,
  LOC_TEXT_MAINMENU_TRAIT_CHOICE_CHOSEN_TRAITS_TITLE,
  LOC_TEXT_MAINMENU_TRAIT_ABILITY_CHOICE_PANEL_TITLE,
  LOC_TEXT_MAINMENU_TRAIT_CHOICE_BUTTON_BACK,
  LOC_TEXT_MAINMENU_TRAIT_CHOICE_BUTTON_ACCEPT,
  LOC_TEXT_MAINMENU_TRAIT_CHOICE_PANEL_REMANING_TRAIT_POINTS,

  LOC_TEXT_SETTINGS_SDR_WINDOW_MODE_WINDOWED,
  LOC_TEXT_SETTINGS_SDR_WINDOW_MODE_BORDERLESS,
  LOC_TEXT_SETTINGS_SDR_WINDOW_MODE_FULLSCREEN,
  LOC_TEXT_SETTINGS_BUTTON_APPLY,
  LOC_TEXT_SETTINGS_BUTTON_CANCEL,
  LOC_TEXT_SETTINGS_BUTTON_ENGLISH,
  LOC_TEXT_SETTINGS_BUTTON_TURKISH,

  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_TREE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_TOMBSTONE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_STONE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_SPIKE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_SKULL,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_PILLAR,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_LAMP,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_FENCE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_DETAIL,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_CANDLE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_BUILDING,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_SPRITE,

  LOC_TEXT_INGAME_LABEL_PRESS_SPACE,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_NEW,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_DAMAGE,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_AMOUTH,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_HITBOX,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_SPEED,
  LOC_TEXT_INGAME_STATE_RESULT_CLEARED,
  LOC_TEXT_INGAME_STATE_RESULT_DEAD,
  LOC_TEXT_INGAME_STATE_RESULT_COLLECTED_SOULS,
  LOC_TEXT_INGAME_STATE_RESULT_ACCEPT,

  LOC_TEXT_PLAYER_STAT_LIFE_ESSENCE,
  LOC_TEXT_PLAYER_STAT_DESC_LIFE_ESSENCE,
  LOC_TEXT_PLAYER_STAT_BREAD,
  LOC_TEXT_PLAYER_STAT_DESC_BREAD,
  LOC_TEXT_PLAYER_STAT_CARDINAL_BOOTS,
  LOC_TEXT_PLAYER_STAT_DESC_CARDINAL_BOOTS,
  LOC_TEXT_PLAYER_STAT_BLAST_SCROLL,
  LOC_TEXT_PLAYER_STAT_DESC_BLAST_SCROLL,
  LOC_TEXT_PLAYER_STAT_HEAVY_CROSS,
  LOC_TEXT_PLAYER_STAT_DESC_HEAVY_CROSS,
  LOC_TEXT_PLAYER_STAT_HOURGLASS,
  LOC_TEXT_PLAYER_STAT_DESC_HOURGLASS,
  LOC_TEXT_PLAYER_STAT_SECOND_HAND,
  LOC_TEXT_PLAYER_STAT_DESC_SECOND_HAND,
  LOC_TEXT_PLAYER_STAT_SEEING_EYES,
  LOC_TEXT_PLAYER_STAT_DESC_SEEING_EYES,
  LOC_TEXT_PLAYER_STAT_TOTAL_TRAIT_POINTS,
  LOC_TEXT_PLAYER_STAT_DESC_TOTAL_TRAIT_POINTS,
  LOC_TEXT_PLAYER_ABILITY_NAME_BULLET,
  LOC_TEXT_PLAYER_ABILITY_NAME_ARCANE_CODEX,
  LOC_TEXT_PLAYER_ABILITY_NAME_COMET,
  LOC_TEXT_PLAYER_ABILITY_NAME_FIREBALL,
  LOC_TEXT_PLAYER_ABILITY_NAME_FIRETRAIL,
  LOC_TEXT_PLAYER_ABILITY_NAME_RADIENCE,

  LOC_TEXT_WORLD_STAGE_WORK_IN_PROGRESS,
  LOC_TEXT_WORLD_STAGE_1_TITLE,

  LOC_TEXT_DISPLAY_ERROR_TEXT_STARTER_ABILITY_NOT_SELECTED,
  LOC_TEXT_DISPLAY_ERROR_TEXT_INSUFFICIENT_FUNDS,
  LOC_TEXT_DISPLAY_ERROR_TEXT_STAGE_IS_NOT_PLAYABLE,

  LOC_TEXT_MAX
} loc_text_id;

typedef struct loc_data {
  std::string language_name;
  std::string codepoints;
  std::array<std::string, LOC_TEXT_MAX> content;
  int index;
  loc_data(void) {
    this->language_name = std::string("");
    this->codepoints = std::string("");
    this->content.fill(std::string(""));
    this->index = 0;
  }
} loc_data;

typedef struct loc_content {
 const char* text;
}loc_content;

typedef struct localized_languages {
  std::vector<loc_data> lang;
  localized_languages(void) {
    this->lang = std::vector<loc_data>();
  }
  localized_languages(std::vector<loc_data> vec) {
    this->lang = vec;
  }
} localized_languages;

const char* lc_txt(int txt_id);

bool loc_parser_parse_localization_data_from_file(int pak_id, int index);
bool loc_parser_parse_localization_data(void);

localized_languages loc_parser_get_loc_langs(void);
loc_data* loc_parser_get_active_language(void);
bool loc_parser_set_active_language_by_name(std::string language_name);
bool loc_parser_set_active_language_by_index(int _index);
#endif