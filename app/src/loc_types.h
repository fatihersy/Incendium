#ifndef LOC_TYPES_H
#define LOC_TYPES_H

#include <string>
#include <vector>

#define LOC_TEXT_SYMBOL_SIZE 3
#define LOC_TEXT_VARIABLE_SIZE 12

#define LOC_TEXT_LANGUAGE_NAME 0

typedef enum loc_text_mainmenu {
  LOC_TEXT_MAINMENU_BUTTON_TEXT_PLAY = 1,
  LOC_TEXT_MAINMENU_BUTTON_TEXT_UPGRADE,
  LOC_TEXT_MAINMENU_BUTTON_TEXT_SETTINGS,
  LOC_TEXT_MAINMENU_BUTTON_TEXT_EXIT,
  LOC_TEXT_MAINMENU_BUTTON_TEXT_EDITOR,
  LOC_TEXT_MAINMENU_UPGRADE_BUTTON_BACK,
  LOC_TEXT_MAINMENU_NUMBERS_1,
  LOC_TEXT_MAINMENU_NUMBERS_2,
  LOC_TEXT_MAINMENU_NUMBERS_3,
  LOC_TEXT_MAINMENU_NUMBERS_4,
  LOC_TEXT_MAINMENU_NUMBERS_5,
  LOC_TEXT_MAINMENU_NUMBERS_6,
  LOC_TEXT_MAINMENU_NUMBERS_7,
  LOC_TEXT_MAINMENU_NUMBERS_8,
  LOC_TEXT_MAINMENU_NUMBERS_9,
  LOC_TEXT_MAINMENU_NUMBERS_10,
}loc_text_mainmenu;

typedef enum loc_text_settings {
  LOC_TEXT_SETTINGS_SDR_WINDOW_MODE_WINDOWED = 25,
  LOC_TEXT_SETTINGS_SDR_WINDOW_MODE_BORDERLESS,
  LOC_TEXT_SETTINGS_SDR_WINDOW_MODE_FULLSCREEN,
  LOC_TEXT_SETTINGS_BUTTON_APPLY,
  LOC_TEXT_SETTINGS_BUTTON_CANCEL,
  LOC_TEXT_SETTINGS_BUTTON_ENGLISH,
  LOC_TEXT_SETTINGS_BUTTON_TURKISH,
}loc_text_settings;

typedef enum loc_text_editor {
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_TREE = 45,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_TOMBSTONE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_STONE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_SPIKE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_SKULL,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_PILLAR,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_LAMP,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_FENCE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_DETAIL,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_CANDLE,
  LOC_TEXT_EDITOR_SDR_PROP_CHANGE_BUILDING,
}loc_text_editor;

typedef enum loc_text_ingame {
  LOC_TEXT_INGAME_LABEL_PRESS_SPACE = 75,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_NEW,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_DAMAGE,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_AMOUTH,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_HITBOX,
  LOC_TEXT_INGAME_UPGRADE_ABILITY_SPEED,
  LOC_TEXT_INGAME_STAGE_RESULT_CLEARED,
  LOC_TEXT_INGAME_STAGE_RESULT_DEAD,
  LOC_TEXT_INGAME_STAGE_RESULT_COLLECTED_SOULS,
  LOC_TEXT_INGAME_STAGE_RESULT_ACCEPT,
}loc_text_ingame;

typedef enum loc_text_player {
  LOC_TEXT_PLAYER_STAT_LIFE_ESSENCE = 100,
  LOC_TEXT_PLAYER_STAT_DESC_LIFE_ESSENCE,
  LOC_TEXT_PLAYER_STAT_BREAD,
  LOC_TEXT_PLAYER_STAT_DESC_BREAD,
  LOC_TEXT_PLAYER_STAT_CARDINAL_BOOTS,
  LOC_TEXT_PLAYER_STAT_DESC_CARDINAL_BOOTS,
  LOC_TEXT_PLAYER_STAT_BLAST_SCROLL,
  LOC_TEXT_PLAYER_STAT_DESC_BLAST_SCROLL,
  LOC_TEXT_PLAYER_STAT_HEAVY_CROSS,
  LOC_TEXT_PLAYER_STAT_DESC_HEAVY_CROSS,
  LOC_TEXT_PLAYER_STAT_HOURGLASS,
  LOC_TEXT_PLAYER_STAT_DESC_HOURGLASS,
  LOC_TEXT_PLAYER_STAT_SECOND_HAND,
  LOC_TEXT_PLAYER_STAT_DESC_SECOND_HAND,
  LOC_TEXT_PLAYER_STAT_SEEING_EYES,
  LOC_TEXT_PLAYER_STAT_DESC_SEEING_EYES,
  LOC_TEXT_PLAYER_ABILITY_NAME_FIREBALL,
  LOC_TEXT_PLAYER_ABILITY_NAME_BULLET,
  LOC_TEXT_PLAYER_ABILITY_NAME_COMET,
}loc_text_player;

typedef enum loc_text_ingame_debug {
  LOC_TEXT_INGAME_DEBUG_WORLDPOS = 125,
  LOC_TEXT_INGAME_DEBUG_ID,
  LOC_TEXT_INGAME_DEBUG_COLLISION,
  LOC_TEXT_INGAME_DEBUG_POSITION,
  LOC_TEXT_INGAME_DEBUG_HEALTH,
  LOC_TEXT_INGAME_DEBUG_SCALE,
  LOC_TEXT_INGAME_DEBUG_SPEED,
  LOC_TEXT_INGAME_DEBUG_ROTATION,
  LOC_TEXT_INGAME_DEBUG_CURRENT_HEALTH,
  LOC_TEXT_INGAME_DEBUG_DAMAGE,
  LOC_TEXT_INGAME_DEBUG_REMAINING,
  LOC_TEXT_INGAME_DEBUG_SOULS,
}loc_text_ingame_debug;

typedef struct loc_data {
  std::string language_name;
  std::string codepoints;
  std::vector<std::string> content;
  unsigned int index;
} loc_data;

typedef struct loc_content {
 const char* symbol;
 const char* text;
}loc_content;

typedef struct localized_languages {
  std::vector<loc_data> lang;
} localized_languages;

const char* lc_txt(unsigned int symbol);

bool loc_parser_parse_localization_data_from_file(const char* file_name);
bool loc_parser_parse_localization_data(void);

localized_languages loc_parser_get_loc_langs(void);
loc_data* loc_parser_get_active_language(void);
bool loc_parser_set_active_language_by_name(std::string language_name);
bool loc_parser_set_active_language_by_index(unsigned int index);

unsigned int symbol_to_index(const char* symbol);

#endif